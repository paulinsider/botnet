#!/bin/bash
#
# install-sh
#
# note: this file is not named install.sh to avoid unwanted behavior
# due to implicit rules with "make"
#
# installer for joy and related files

usage() { 
    echo "usage:"
    echo ""
    echo "   $0 [ -c configfile ] [ -a anonfile ] [-w watchfile ] [ -k keyfile ]"
    echo ""
    echo "where the options are as follows"
    echo ""
    echo "   configfile is the name of a joy configuration file; if no" 
    echo "   such file is provided, then the default configuration options.cfg is used"
    echo ""
    echo "   anonfile is the name of a file containing subnets to be anonymized; if no" 
    echo "   such file is provided, then the default file anon.cfg is used"
    echo ""
    echo "   watchfile is the name of a file containing subnets or addresses to labeled"
    echo "   as malware; if no such file is provided, then the Talos ip-filter.blf file"
    echo "   is downloaded and used"
    echo ""
    echo "   keyfile is the name of a file containing an SSH private key to be used"
    echo "   to upload the JSON flow data files to a server via scp; if no such file"
    echo "   is provided, then an SSH file with the default name of upload-key is created" 
    echo ""
    echo "for more information about these files and their formats, please read the" 
    echo "joy man page"
    echo ""
    exit
} 

# set defaults
#
CWD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
APP_ROOT=$(dirname "$CWD")
CONFIGFILE=${CWD}/options.cfg
ANONFILE=${APP_ROOT}/internal.net
WATCHFILE=""
KEYFILE=""
TLS_FINGERPRINT_FILE=${APP_ROOT}/tls_fingerprint.json

echo
echo JOY INSTALL-SH
echo --------------------
echo

# check command line arguments, ovveride defaults as appropirate
#
while getopts "c:a:w:k:" arg; do
    case $arg in
	c)
	    echo "-c was triggered with option ${OPTARG}" 
	    CONFIGFILE=${OPTARG}
	    ;;
	a)
	    echo "-a was triggered with option ${OPTARG}" 
	    ANONFILE=${OPTARG}
	    ;;
	w)
	    echo "-w was triggered with option ${OPTARG}" 
	    WATCHFILE=${OPTARG}
	    ;;
	k)
	    echo "-k was triggered with option ${OPTARG}" 
	    KEYFILE=${OPTARG}
	    ;;
	:)
	    echo "error: option -${OPTARG} requires an argument" 
	    usage
	    ;;
	?)
	    usage
	    ;;
    esac
done
if [ $(($# + 1)) != "${OPTIND}" ]; then
    echo "error: illegal option"
    usage
fi

# this script requires root privileges; complain and bail otherwise
#
if [[ $EUID -ne 0 ]]; then
   echo "error: $0 must be run as root; perhaps run \"sudo $0\"" 
   exit 1
fi

# check for the presence of required files
#
if [ ! -x ${APP_ROOT}/bin/joy ]; then
    echo "error: could not find executable file joy (please run \"make\")"
    exit
fi

if [ ! -f ${APP_ROOT}/doc/joy.1 ]; then
    echo "error: could not find manual page joy.1"
    exit
fi

if [ ! -f ${CWD}/joy.rc ]; then
    echo "error: could not find script joy.rc"
    exit
fi

if [ ! -f $CONFIGFILE ]; then
    echo "error: could not find configuration file $CONFIGFILE"
    exit
fi

if [ ! -f ${ANONFILE} ]; then
    echo "error: could not find private address configuration file ${ANONFILE}"
    exit
fi

if [ "${KEYFILE}" == "" ]; then
    # set default name for upload key file 
    #
    KEYFILE=upload-key  
fi
if [ -f ${KEYFILE} ]; then 
    echo "file ${KEYFILE} exists; not overwriting it"
    NEWKEY=0
else
    echo "generating SSH public/private keypair ... "
    ssh-keygen -f ${KEYFILE} -P "" -t rsa -b 2048
    retval=$?
    if [ $retval -ne "0" ]; then
	echo "error: could not generate SSH key ${KEYFILE}"
	exit
    fi
    if [ ! -f ${KEYFILE} ]; then
	echo "error: could not find keyfile ${KEYFILE}"
	exit
    fi
    NEWKEY=1
fi

create_directory () {
    if [ ! -d $1 ]; then
        mkdir $1
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not make directory $1"
            exit
        fi
    else
        echo "directory $1 already exists"
    fi
}

sysname=`uname -s`

if [ "$sysname" == "Darwin" ]; then
    ##
    # Darwin operating system detected
    ##
    echo "found $sysname (Mac OS X), installing joy ..."

    # Create /usr/local/bin directory if it does not currently exist
    create_directory /usr/local/bin

    # Create /usr/local/var directory if it does not currently exist
    create_directory /usr/local/var

    # Create /usr/local/var/joy directory if it does not currently exist
    create_directory /usr/local/var/joy

    # Create /usr/local/var/log directory if it does not currently exist
    create_directory /usr/local/var/log

    # Create /usr/local/etc directory if it does not currently exist
    create_directory /usr/local/etc

    # Create /usr/local/etc/joy directory if it does not currently exist
    create_directory /usr/local/etc/joy

    # Create /usr/local/share directory if it does not currently exist
    create_directory /usr/local/share

    # Create /usr/local/share/man directory if it does not currently exist
    create_directory /usr/local/share/man

    # Create /usr/local/share/man/man1 directory if it does not currently exist
    create_directory /usr/local/share/man/man1

    # Install the binary executable
    cp ${APP_ROOT}/bin/joy /usr/local/bin
    retval=$?
    if [ $retval -ne "0" ]; then
        echo "error: could not copy bin/joy to /usr/local/bin"
        exit
    fi

    # Install query
    cp ${APP_ROOT}/query.py /usr/local/bin/
    retval=$?
    if [ $retval -ne "0" ]; then
        echo "error: could not copy to /usr/local/bin/"
        exit
    fi

    # Install the configuration file
    if [ -f /usr/local/etc/joy/options.cfg ]; then
        echo "warning: file /usr/local/etc/joy/options.cfg exists; renaming that file to options.cfg.bak"
        mv /usr/local/etc/joy/options.cfg /usr/local/etc/joy/options.cfg.bak 
    else
        cp ${CONFIGFILE} /usr/local/etc/joy/options.cfg
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not copy ${CONFIGFILE} to /usr/local/etc/joy"
            exit
        fi
    fi

    # Install the tls fingerprint file
    if [ -f /usr/local/etc/joy/${TLS_FINGERPRINT_FILE} ]; then
        echo "file /usr/local/etc/joy/${TLS_FINGERPRINT_FILE} exists; not installing tls fingerprint file"
    else
        cp ${TLS_FINGERPRINT_FILE} /usr/local/etc/joy/
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not copy ${TLS_FINGERPRINT_FILE} to /usr/local/etc/joy"
            exit
        fi
    fi

    # Install the anonymization file
    if [ -f /usr/local/etc/joy/${ANONFILE} ]; then
        echo "file /usr/local/etc/joy/${ANONFILE} exists; not installing anonymization subnet file"
    else
        cp ${ANONFILE} /usr/local/etc/joy/
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not copy ${ANONFILE} to /usr/local/etc/joy"
            exit
        fi
    fi

    # Install the ssh key file
    mv ${KEYFILE} /usr/local/etc/joy/
    retval=$?
    if [ $retval -ne "0" ]; then
        echo "error: could not move ${KEYFILE} to /usr/local/etc/joy"
        exit
    fi
    chmod 600 /usr/local/etc/joy/${KEYFILE}


    if [ "${WATCHFILE}" != "" ]; then
        # Install the watch file
        if [ -f /usr/local/etc/joy/${WATCHFILE} ]; then
            echo "file /etc/joy/${WATCHFILE} exists; overwriting with recent file"
        fi
        cp ${WATCHFILE} /usr/local/etc/joy/
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not copy ${WATCHFILE} to /usr/local/etc/joy"
            exit
        fi
    fi

    # Install the Launchd script for daemon management
    cp ${CWD}/joy.plist /Library/LaunchDaemons/
    retval=$?
    if [ $retval -ne "0" ]; then
        echo "error: could not copy joy.plist to /Library/LaunchDaemons"
        exit
    fi

    # Install the manpage documentation
    cp ${APP_ROOT}/doc/joy.1 /usr/local/share/man/man1/
    retval=$?
    if [ $retval -ne "0" ]; then
        echo "error: could not copy to /usr/local/share/man/man1 (man page will be unavailable)"
        exit
    fi

    ls -l /usr/local/bin/joy
    ls -l /usr/local/bin/query.py
    ls -l /usr/local/etc/joy/*
    ls -l /usr/local/share/man/man1/joy.1
    ls -l /Library/LaunchDaemons/joy.plist

    echo "stopping flow capture daemon (just in case one is already running)"
    launchctl unload /Library/LaunchDaemons/joy.plist

    echo "starting flow capture daemon"
    launchctl load /Library/LaunchDaemons/joy.plist

    echo "...done"
    echo
    exit
elif [ "$sysname" == "Linux" ]; then 
    ##
    # Linux operating system detected
    ##
    echo "found $sysname (Linux), installing joy ..."

    # Default to sysv for daemon management system
    daemon_system='sysv'
    if [ -f /sbin/init ]; then
        # Check if the file is a symbolic link
        if [ -h /sbin/init ]; then
            # Check whether linked to systemd
            file /sbin/init | grep 'systemd'
            retval=$?
            if [ $retval == "0" ]; then
                daemon_system='systemd'
            fi
        fi
    fi

    # Create /usr/local/bin directory if it does not currently exist
    create_directory /usr/local/bin

    # Create /usr/local/var directory if it does not currently exist
    create_directory /usr/local/var

    # Create /usr/local/var/joy directory if it does not currently exist
    create_directory /usr/local/var/joy

    # Create /usr/local/var/log directory if it does not currently exist
    create_directory /usr/local/var/log

    # Create /usr/local/etc directory if it does not currently exist
    create_directory /usr/local/etc

    # Create /usr/local/etc/joy directory if it does not currently exist
    create_directory /usr/local/etc/joy

    # Create /usr/local/share directory if it does not currently exist
    create_directory /usr/local/share

    # Create /usr/local/share/man directory if it does not currently exist
    create_directory /usr/local/share/man

    # Create /usr/local/share/man/man1 directory if it does not currently exist
    create_directory /usr/local/share/man/man1

    # Create /usr/local/share/joy directory if it does not currently exist
    create_directory /usr/local/share/joy

    # Create /usr/local/share/joy/data directory if it does not currently exist
    create_directory /usr/local/share/joy/data

    # Stop service, if a previous version is already running
    echo "stopping service (this might take some time)" 
    if [ "$daemon_system" == "sysv" ]; then
        service joy stop 
    elif [ "$daemon_system" == "systemd" ]; then
        systemctl stop joy.service
    fi

    # Install the binary executable
    cp ${APP_ROOT}/bin/joy /usr/local/bin/
    retval=$?
    if [ $retval -ne "0" ]; then
        echo "error: could not copy to /usr/local/bin/"
        exit
    fi

    # Install query
    cp ${APP_ROOT}/query.py /usr/local/bin/
    retval=$?
    if [ $retval -ne "0" ]; then
        echo "error: could not copy to /usr/local/bin/"
        exit
    fi

    # Install the configuration file
    if [ -f /usr/local/etc/joy/options.cfg ]; then
        echo "warning: file /usr/local/etc/joy/options.cfg exists; renaming that file to options.cfg.bak"
        mv /usr/local/etc/joy/options.cfg /usr/local/etc/joy/options.cfg.bak 
    else
        cp ${CONFIGFILE} /usr/local/etc/joy/options.cfg
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not copy to /usr/local/etc/joy"
            exit
        fi
    fi

    # Install the tls fingerprint file
    if [ -f /usr/local/etc/joy/${TLS_FINGERPRINT_FILE} ]; then
        echo "file /usr/local/etc/joy/${TLS_FINGERPRINT_FILE} exists; not installing tls fingerprint file"
    else
        cp ${TLS_FINGERPRINT_FILE} /usr/local/etc/joy/
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not copy ${TLS_FINGERPRINT_FILE} to /usr/local/etc/joy"
            exit
        fi
    fi

    # Install the anonymization file
    if [ -f /usr/local/etc/joy/${ANONFILE} ]; then
        echo "file /usr/local/etc/joy/${ANONFILE} exists; not installing subnet file"
    else
        cp ${ANONFILE} /usr/local/etc/joy/
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not copy to /usr/local/etc/joy"
            exit
        fi
    fi

    # Install the ssh key file
    mv ${KEYFILE} /usr/local/etc/joy/
    retval=$?
    if [ $retval -ne "0" ]; then
        echo "error: could not move ${KEYFILE} to /usr/local/etc/joy"
        exit
    fi
    chmod 600 /usr/local/etc/joy/${KEYFILE}

    if [ "${WATCHFILE}" != "" ]; then
        # Install the watch file
        if [ -f /usr/local/etc/joy/${WATCHFILE} ]; then
            echo "file /usr/local/etc/joy/${WATCHFILE} exists; overwriting with recent file"
        fi
        cp ${WATCHFILE} /usr/local/etc/joy/
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not copy to /usr/local/etc/joy"
            exit
        fi
    fi

    # Install the manpage documentation
    cp ${APP_ROOT}/doc/joy.1 /usr/local/share/man/man1/
    retval=$?
    if [ $retval -ne "0" ]; then
        echo "error: could not copy to /usr/local/share/man/man1/"
        exit
    fi
    mandb >/dev/null
    retval=$?
    if [ $retval -ne "0" ]; then
        echo "error: could not run mandb (man page will be unavailable)"
        # exit
    fi

    cp ${APP_ROOT}/data/* /usr/local/share/joy/data
    retval=$?
    if [ $retval -ne "0" ]; then
        echo "error: could not copy data files into directory /usr/local/share/joy/data"
        exit
    fi

    ##
    # Copy the daemon service files and start it
    ##
    if [ "$daemon_system" == "sysv" ]; then
        cp ${CWD}/joy.rc /etc/init.d/joy
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not copy to /etc/init.d"
            exit
        fi
        chmod +x /etc/init.d/joy
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not chmod +x /etc/init.d/joy"
            exit
        fi

        # Configure to run automatically at boot time
        update-rc.d joy defaults
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: update-rc.d failed (return value: $retval)"
            exit
        fi

        # Start service 
        service joy start
    elif [ "$daemon_system" == "systemd" ]; then
        cp ${CWD}/joy.service /etc/systemd/system
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not copy joy.service to /etc/systemd/system"
            exit
        fi
        chmod 644 /etc/systemd/system/joy.service
        retval=$?
        if [ $retval -ne "0" ]; then
            echo "error: could not chmod 644 /etc/systemd/system/joy.service"
            exit
        fi

        if [ ! -d "/etc/systemd/system/joy.service.d" ]; then
            mkdir /etc/systemd/system/joy.service.d
        fi

        cp ${CWD}/joy_env.conf /etc/systemd/system/joy.service.d
        if [ $retval -ne "0" ]; then
            echo "error: could not copy joy_env.conf to /etc/systemd/system/joy.service.d"
            exit
        fi

        # Configure to run at boot time
        systemctl enable joy.service

        # Start service
        systemctl start joy.service
    fi

    # List all the installed files
    ls -l /usr/local/bin/joy
    ls -l /usr/local/bin/query.py
    ls -l /usr/local/etc/joy/*
    ls -l /usr/local/share/joy/data/*
    ls -l /usr/local/share/man/man1/joy.1

    if [ "$daemon_system" == "sysv" ]; then
        ls -l /etc/init.d/joy
        service joy status
    elif [ "$daemon_system" == "systemd" ]; then
        ls -l /etc/systemd/system/joy.service
        ls -l /etc/systemd/system/joy.service.d/joy_env.conf
        systemctl status joy.service
    fi

    echo "done" 
    echo
else

    echo "error: unknown system ($sysname)"
    exit

fi


if [ "$NEWKEY" -eq "1" ]; then

    echo "A new SSH key was generated, and its private key was installed in"
    echo "the /usr/local/etc/joy directory.  To use this key to authenticate scp"
    echo "connections to a server that copy the JSON files, you will need to"
    echo "provide the public key ${KEYFILE}.pub to the server administrator,"
    echo "as it needs to be installed in the ./ssh/known_hosts file."

fi
